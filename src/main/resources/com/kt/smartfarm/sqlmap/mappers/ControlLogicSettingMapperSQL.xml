<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kt.smartfarm.supervisor.mapper.ControlLogicSettingMapper">

    <resultMap id="ControlCheckConditionMap" type="controlLogicSettingCheckConditionVO">
        <id property="id" column="id"/>
        <result column="control_setting_id" property="controlSettingId"/>
        <result column="logic_id" property="logicId"/>
        <result column="operator_code" property="operatorCode"/>
        <result column="operator_condition" property="operatorCondition"/>
        <result column="action" property="action"/>
        <result column="value" property="value"/>
        <collection property="deviceIdList" javaType="java.util.ArrayList" ofType="Long">
            <result column="device_id"></result>
        </collection>
    </resultMap>
    <resultMap id="ControlDeviceMap" type="controlLogicSettingDeviceVO">
        <!--<id property="deviceNum"  column="device_num"  />-->
        <!--<result column="is_main" property="isMain" />-->
        <!--<result column="able_array" property="ableArray" />-->
        <!--<result column="is_used" property="isUsed" />-->
        <!--<result column="required" property="required" />-->
        <!--<collection   property="deviceIdList" javaType="java.util.ArrayList"  ofType="Long" >-->
        <!--<result column="device_id"></result>-->
        <!--</collection>-->
    </resultMap>


    <resultMap id="ControlLogicSettingMap" type="controlLogicSettingVO">
        <id column="control_setting_id" property="controlSettingId"/>
        <result column="tmp_gsm_key" property="tmpGsmKey"/>
        <result column="log_dt" property="logDt"/>
        <result column="green_house_id" property="greenHouseId"/>
        <result column="def_logic_id" property="logicId"/>
        <result column="def_logic_name" property="defLogicName"/>
        <result column="java_class_name" property="javaClassName"/>
        <result column="logic_name" property="logicName"/>
        <result column="logic_env" property="logicEnv"/>
        <result column="logic_period_env" property="logicPeriodEnv"/>
        <result column="logic_period_size" property="logicPeriodSize"/>
        <result column="auto_manual_mode" property="autoManualMode"/>
        <result column="create_dt" property="createDt"/>
        <result column="default_period_size" property="defaultPeriodSize"/>
        <result column="pre_order_setting_id" property="preOrderSettingId"/>
        <result column="pre_order_setting_id" property="preOrderSettingId"/>
        <result column="view_order" property="viewOrder"/>
        <collection property="checkConditionList" javaType="java.util.ArrayList"
                    ofType="controlLogicSettingCheckConditionVO" column="control_setting_id"
                    select="getCheckConditions"/>
        <collection property="deviceList" javaType="java.util.ArrayList"
                    ofType="controlLogicSettingDeviceVO"
                    column="control_setting_id" select="getControlDevices"/>
    </resultMap>


    <resultMap id="ControlLogicSettingHistoryMap" type="controlLogicSettingHistoryVO">
        <id column="control_setting_id" property="controlSettingId"/>
        <id column="log_dt" property="logDt"/>
        <result column="gsm_key" property="gsmKey"/>
        <result column="green_house_id" property="greenHouseId"/>
        <result column="def_logic_id" property="logicId"/>
        <result column="def_logic_name" property="defLogicName"/>
        <result column="java_class_name" property="javaClassName"/>
        <result column="logic_name" property="logicName"/>
        <result column="logic_env" property="logicEnv"/>
        <result column="logic_period_env" property="logicPeriodEnv"/>
        <result column="logic_period_size" property="logicPeriodSize"/>
        <result column="auto_manual_mode" property="autoManualMode"/>
        <result column="create_dt" property="createDt"/>
        <result column="default_period_size" property="defaultPeriodSize"/>
        <result column="pre_order_setting_id" property="preOrderSettingId"/>
        <result column="pre_order_setting_id" property="preOrderSettingId"/>
        <collection property="checkConditionList" javaType="java.util.ArrayList"
                    ofType="controlLogicSettingCheckConditionVO" column="control_setting_id"
                    select="getCheckConditions"/>
        <collection property="deviceList" javaType="java.util.ArrayList"
                    ofType="controlLogicSettingDeviceVO"
                    column="control_setting_id" select="getControlDevices"/>
    </resultMap>
<!--    <resultMap id="liquidMap" type="liquidVO" autoMapping="true">-->

<!--    </resultMap>-->
    <resultMap id="controlSettingLiquidMap"
               type="com.kt.smartfarm.service.ControlSettingLiquidVO" autoMapping="true">
        <id column="id" property="id" />
        <result column="liquid_id" property="liquidId" />
        <association property="liquidDefault" javaType="liquidVO" column="liquid_id" select="getCdLiquid" autoMapping="true"   />
    </resultMap>

    <select id="getCdLiquid" resultType="liquidVO">
    SELECT liquid_id, liquid_name, mix_type, default_mix_rate, default_packing_size, packing_unit
    FROM cd_liquid
        WHERE  #{liquid_id} IS NULL OR liquid_id = #{liquid_id}
<!--    <where>-->
<!--        <if test="liquidId != null">liquid_id = #{liquidId}</if>-->
<!--    </where>-->
    </select>

    <select id="getControlSettingLiquid" resultMap="controlSettingLiquidMap">
    SELECT  id, publish_level, owner_user_idx, title, prd_code, liquid_id, packing_size, mix_type, mix_rate, watering_amt, `comment`, create_dt, update_dt
    FROM control_setting_liquid
    WHERE publish_level = 'OPEN'
        <if test="ownerUserIdx != null">OR owner_user_idx = #{ownerUserIdx}</if>
    </select>

    <insert id="insertControlSettingLiquid" parameterType="controlSettingLiquidVO">
    INSERT INTO control_setting_liquid (
    publish_level, owner_user_idx, title, prd_code, liquid_id, packing_size, mix_type, mix_rate, watering_amt, `comment`, create_dt
    )
    VALUES
    (
    'OWNER', #{ownerUserIdx}, #{title}, #{prdCode}, #{liquidId}, #{packingSize}, #{mixType}, #{mixRate}, #{wateringAmt}, #{comment}, NOW()
    );
    <selectKey keyProperty="id" resultType="Long" keyColumn="id">
        SELECT LAST_INSERT_ID() AS id;
    </selectKey>
    </insert>

    <update id="updateControlSettingLiquid" parameterType="controlSettingLiquidVO">
    UPDATE control_setting_liquid
    SET title = #{title}, prd_code = #{prdCode}, liquid_id = #{liquidId}, packing_size = #{packingSize}, mix_type = #{mixType},
        mix_rate = #{mixRate}, watering_amt = #{wateringAmt}, `comment` = #{comment}, update_dt = NOW()
    WHERE id = #{id} AND owner_user_idx = #{ownerUserIdx};
    </update>
    <delete id="deleteControlSettingLiquid">
    DELETE control_setting_liquid
    WHERE id  = #{id} AND owner_user_idx = #{ownerUserIdx};
    </delete>




    <select id="getControlLogicSetting" resultMap="ControlLogicSettingMap">
        /* 설정된 제어로직을 조회 , 선행 제어로직 포함 */
        SELECT CL.id AS def_logic_id, CL.name AS def_logic_name, CL.java_class_name, CL.default_period_size,
        CS.id AS control_setting_id, CS.green_house_id, CS.logic_name, CS.logic_env, CS.logic_period_env, CS.logic_period_size, CS.auto_manual_mode, CS.update_dt,
        CS.view_order, CS.create_dt,CSPO.pre_order_setting_id,
        GH.gsm_key
        FROM control_logic CL
        INNER JOIN control_setting CS ON CL.id = CS.logic_id
        INNER JOIN green_house GH ON GH.id = CS.green_house_id
        LEFT JOIN control_setting_pre_order CSPO ON CSPO.control_setting_id = CS.id
        <where>
            <if test="gsm_key != null">
                AND GH.gsm_key = #{gsm_key}
            </if>
            <if test="green_house_id != null">
                AND GH.id = #{green_house_id}
            </if>

            <if test="control_setting_id != null">
                AND CS.id = #{control_setting_id}
            </if>
            <if test="logic_id != null">
                <foreach collection="logic_id" open="AND CL.id IN (" close=")" separator="," item="item" index="idx">#{item}</foreach>
            </if>
        </where>
        ORDER BY view_order;
    </select>

    <select id="getControlLogicSettingHistoryList" resultMap="ControlLogicSettingHistoryMap">
        /* 설정된 제어로직을 조회 , 선행 제어로직 포함 */
        SELECT UNIX_TIMESTAMP(CS.log_dt) AS log_dt,
        CL.id AS def_logic_id, CL.name AS def_logic_name, CL.java_class_name, CL.default_period_size,
        CS.id AS control_setting_id, CS.green_house_id, CS.logic_name, CS.logic_env, CS.logic_period_env, CS.logic_period_size, CS.auto_manual_mode, CS.update_dt,
        CS.create_dt,CSPO.pre_order_setting_id,
        GH.gsm_key
        FROM control_logic CL
        INNER JOIN control_setting_log CS ON CL.id = CS.logic_id
        INNER JOIN green_house GH ON GH.id = CS.green_house_id
        LEFT JOIN control_setting_pre_order CSPO ON CSPO.control_setting_id = CS.id
        <where>
            <if test="gsm_key != null">
                AND GH.gsm_key = #{gsm_key}
            </if>
            <if test="green_house_id != null">
                AND GH.id = #{green_house_id}
            </if>
            <if test="control_setting_id != null">
                AND CS.id = #{control_setting_id}
            </if>
            <if test="from_date !=null">AND CS.log_dt >= FROM_UNIXTIME(#{from_date} / 1000)</if>
            <if test="to_date !=null">AND FROM_UNIXTIME(#{to_date} / 1000) > CS.log_dt </if>
        </where>
    </select>

    <!--<select id="getControlLogicSettingHistoryDetail" resultMap="ControlLogicSettingHistoryMap">-->
        <!--/* 설정된 제어로직을 조회 , 선행 제어로직 포함 */-->
        <!--SELECT CL.id AS def_logic_id, CL.name AS def_logic_name, CL.java_class_name, CL.default_period_size,-->
        <!--CS.log_dt, CS.id AS control_setting_id, CS.green_house_id, CS.logic_name, CS.logic_env, CS.logic_period_env, CS.logic_period_size, CS.auto_manual_mode, CS.update_dt,-->
        <!--CS.create_dt,CSPO.pre_order_setting_id,-->
        <!--GH.gsm_key-->
        <!--FROM control_logic CL-->
        <!--INNER JOIN control_setting_log CS ON CL.id = CS.logic_id-->
        <!--INNER JOIN green_house GH ON GH.id = CS.green_house_id-->
        <!--LEFT JOIN control_setting_pre_order CSPO ON CSPO.control_setting_id = CS.id-->
        <!--<where>-->
            <!--<if test="gsm_key != null">-->
                <!--AND GH.gsm_key = #{gsm_key}-->
            <!--</if>-->
            <!--<if test="green_house_id != null">-->
                <!--AND GH.id = #{green_house_id}-->
            <!--</if>-->

            <!--<if test="control_setting_id != null">-->
                <!--AND CS.id = #{control_setting_id}-->
            <!--</if>-->
            <!--<if test="log_dt != null">-->
                <!--AND CS.log_dt =  FROM_UNIXTIME(#{log_dt} / 1000)-->
            <!--</if>-->
        <!--</where>-->
    <!--</select>-->


    <select id="getControlDevices" resultMap="ControlDeviceMap">
    /* 제어로직에 사용될 목록 조회 */
    SELECT CSD.id, CSD.control_setting_id, CSD.logic_id, CSD.device_num, CSD.device_insert_order, CSD.device_id
    , CLD.is_main, CLD.able_array, CLD.required, CLD.is_used
    FROM control_setting_device CSD
    INNER JOIN control_logic_device CLD ON CLD.logic_id = CSD.logic_id AND CLD.device_num = CSD.device_num
    WHERE CSD.control_setting_id = #{control_setting_id}
    ORDER BY CSD.device_num, CSD.device_insert_order;
    </select>

    <select id="getCheckConditions" resultMap="ControlCheckConditionMap">
    /* 선행 확인 조건 조회 */
    SELECT  CSCC.id, CSCC.control_setting_id,
    CSCC.operator_code, CSCC.operator_condition, CSCC.action, CSCC.value, CSCCD.device_id
    FROM control_setting_chk_condition CSCC
    INNER JOIN control_setting_chk_condition_device CSCCD ON CSCC.id = CSCCD.control_setting_chk_condition_id
    WHERE CSCC.control_setting_id = #{control_setting_id}
    </select>

    <select id="listControlSettingOperator" resultType="controlSettingOperatorVO">
        SELECT operator_code, operator_group, name, display_order
        FROM cd_control_setting_operator
    </select>

    <insert id="insertControlSettingChkConditionDevice" parameterType="controlLogicSettingCheckConditionVO">
        INSERT INTO control_setting_chk_condition_device (gsm_key, control_setting_chk_condition_id, device_id)
        <foreach collection="deviceIdList" item="deviceIdList" index="deviceIdList" separator="," open=" VALUES ">
            ( #{tmpGsmKey}, #{id}, #{deviceIdList} )
        </foreach>
    </insert>
    <delete id="deleteControlSettingChkConditionDevice">
        DELETE FROM control_setting_chk_condition_device
        WHERE control_setting_chk_condition_id = #{id}
    </delete>


    <insert id="insertControlSettingChkCondition" parameterType="controlLogicSettingCheckConditionVO" useGeneratedKeys="true">
        INSERT INTO control_setting_chk_condition (gsm_key, control_setting_id, operator_code, operator_condition, value, action ,id)
        VALUES( #{tmpGsmKey}, #{controlSettingId}, #{operatorCode}, #{operatorCondition}, #{value}, #{action}
        <if test="id == null">
            ,NEXTVAL_control_setting_chk_condition(#{tmpGsmKey})
        </if>
        <if test="id != null">
            ,#{id}
        </if>
        );
        <selectKey keyProperty="id" resultType="Long" keyColumn="id">
            SELECT LASTVAL_control_setting_chk_condition(#{tmpGsmKey}) AS id;
        </selectKey>
    </insert>
    <update id="updateControlSettingChkCondition" parameterType="controlLogicSettingCheckConditionVO">
        update
            control_setting_chk_condition
        set control_setting_id = #{controlSettingId}, operator_code = #{operatorCode}, operator_condition = #{operatorCondition}, value = #{value}, action = #{action}
        where id = #{id};
    </update>
    <delete id="deleteControlSettingChkCondition">
        DELETE FROM
        control_setting_chk_condition
        <where>
            <if test="id != null">AND id = #{id};</if>
            <if test="control_setting_id != null">AND control_setting_id = #{control_setting_id};</if>
        </where>
    </delete>


    <insert id="insertControlSettingDevice" parameterType="controlLogicSettingDeviceVO" useGeneratedKeys="true">
        INSERT INTO control_setting_device ( gsm_key, control_setting_id, logic_id, device_num, device_insert_order, device_id,id  )
        VALUES( #{tmpGsmKey}, #{controlSettingId}, #{logicId}, #{deviceNum}, #{deviceInsertOrder}, #{deviceId}
        <if test="id == null">
            ,NEXTVAL_control_setting_device(#{tmpGsmKey})
        </if>
        <if test="id != null">
            ,#{id}
        </if>
        );
        <selectKey keyProperty="id" resultType="Long" keyColumn="id">
            SELECT LASTVAL_control_setting_device(#{tmpGsmKey}) AS id;
        </selectKey>
    </insert>
    <update id="updateControlSettingDevice" parameterType="controlLogicSettingDeviceVO">
        update
            control_setting_device
        set control_setting_id = #{controlSettingId}, logic_id = #{logicId}, device_num = #{deviceNum}, device_insert_order = #{deviceInsertOrder},
            device_id = #{deviceId}
        where id = #{id};
    </update>
    <delete id="deleteControlSettingDevice">
        DELETE FROM
        control_setting_device
        <where>
            <if test="id != null">AND id = #{id};</if>
            <if test="control_setting_id != null">AND control_setting_id = #{control_setting_id};</if>
        </where>
    </delete>


    <insert id="insertControlSettingPreOrder" parameterType="controlLogicSettingVO" useGeneratedKeys="true">
        INSERT INTO control_setting_pre_order (gsm_key, control_setting_id, pre_order_setting_id)
        VALUES( #{tmpGsmKey}, #{controlSettingId}, #{preOrderSettingId} );
    </insert>
    <delete id="deleteControlSettingPreOrder">
        DELETE FROM
        control_setting_pre_order
        <where>
            <if test="id != null">AND id = #{id};</if>
            <if test="control_setting_id != null">AND control_setting_id = #{control_setting_id};</if>
        </where>
    </delete>

    <insert id="insertControlSetting" parameterType="controlLogicSettingVO" useGeneratedKeys="true">
        INSERT INTO control_setting ( gsm_key, green_house_id, logic_name, logic_id, logic_period_size, logic_env, logic_period_env, create_dt, update_dt,
        auto_manual_mode, java_class_name,id
        <if test="viewOrder != null">
        , view_order
        </if>
        )
        VALUES(#{tmpGsmKey}, #{greenHouseId}, #{logicName}, #{logicId}, #{logicPeriodSize}, #{logicEnv}, #{logicPeriodEnv}, NOW(), NOW(),
        #{autoManualMode}, (SELECT java_class_name FROM control_logic WHERE id = #{logicId} )
        <if test="controlSettingId == null">
            ,NEXTVAL_control_setting(#{tmpGsmKey})
        </if>
        <if test="controlSettingId != null">
            ,#{controlSettingId}
        </if>
        <if test="viewOrder != null">
            , #{viewOrder}
        </if>
        );
        <selectKey keyProperty="controlSettingId" resultType="Long" keyColumn="id">
            SELECT LASTVAL_control_setting(#{tmpGsmKey}) AS id;
        </selectKey>
    </insert>
    <update id="updateControlSetting" parameterType="controlLogicSettingVO">
        update
            control_setting
        <set>
            <if test="logicName != null">logic_name = #{logicName}</if>
            <if test="logicId != null">  , logic_id = #{logicId}</if>
            <if test="logicPeriodSize != null">, logic_period_size = #{logicPeriodSize}</if>
            <if test="logicEnv != null">, logic_env = #{logicEnv}</if>
            <if test="logicPeriodEnv != null">, logic_period_env = #{logicPeriodEnv}</if>
            <if test="autoManualMode != null">, auto_manual_mode = #{autoManualMode}</if>
            ,  update_dt = NOW()
            <if test="viewOrder != null">
            , view_order = #{viewOrder}
            </if>
            ,update_system = #{updateSystem}
        </set>
        where id = #{controlSettingId};
    </update>
    <delete id="deleteControlSetting">
        DELETE FROM
            control_setting
        WHERE id = #{control_setting_id}
    </delete>
    <delete id="delChkConditionSetting">
        DELETE FROM
            control_setting_chk_condition
        WHERE id = #{chkConditionId}
    </delete>


    <update id="updateControlSettingEnv">
        UPDATE control_setting
        <set>
            <if test="logic_env_column != null">
                <foreach collection="logic_env_column" open="JSON_REPLACE(logic_env, " separator="," close=")" index="logic_env_column" item="logic_env_column">
                    CONCAT( '$.', #{logic_env_column} ) , #{logic_env_value}
                </foreach>
            </if>
            <if test="logic_env_column != null">
                ,
                <foreach collection="logic_period_env_column" open="JSON_REPLACE(logic_period_env, " separator="," close=")" index="logic_period_env_column"
                         item="logic_period_env_column">
                    CONCAT( '$.', #{logic_period_env_column} ) , #{logic_period_env_value}
                </foreach>
            </if>

        </set>
        WHERE id = #{control_setting_id};
    </update>

    <update id="updateLogicEnv">
        UPDATE control_setting
        <set>
            <if test="logic_env != null">logic_env = #{logic_env},</if>
            <if test="logic_period_env != null">logic_period_env = #{logic_period_env},</if>
            <if test="auto_manual_mode != null">auto_manual_mode = #{auto_manual_mode},</if>
            <if test="update_dt != null">update_dt = IF(#{update_dt} IS NULL, NOW(), FROM_UNIXTIME(#{update_dt} / 1000) )</if>
        </set>
        WHERE id = #{control_setting_id};
    </update>


    <insert id="copyToNewGSMContolSetting">
        INSERT INTO control_setting
          (id, gsm_key, green_house_id, logic_name, logic_id, logic_period_size, logic_env, logic_period_env, create_dt, update_dt, auto_manual_mode, java_class_name, control_status, view_order)
        SELECT
            (${to_gsm_key}  * 1000000000) + (S.id %  1000000000), #{to_gsm_key},  (${to_gsm_key}  * 1000000000) + (S.green_house_id %  1000000000),
               S.logic_name, S.logic_id, S.logic_period_size, S.logic_env, S.logic_period_env, S.create_dt, S.update_dt, S.auto_manual_mode, S.java_class_name, S.control_status, view_order
        FROM control_setting S
        INNER JOIN green_house GH ON GH.id = S.green_house_id
        WHERE GH.gsm_key = #{from_gsm_key}
    </insert>

    <insert id="copyToNewGSMContolSettingCheckCondition">
        INSERT INTO control_setting_chk_condition
          (id, gsm_key, control_setting_id, operator_code, operator_condition, `value`, `action`)
        SELECT (${to_gsm_key}  * 1000000000) + (D.id %  1000000000)
            ,#{to_gsm_key}
             ,(${to_gsm_key}  * 1000000000) + (D.control_setting_id %  1000000000)
               ,D.operator_code, D.operator_condition, D.`value`, D.`action`
        FROM control_setting_chk_condition D
          INNER JOIN control_setting S ON  S.id = D.control_setting_id
          INNER JOIN green_house GH ON GH.id = S.green_house_id
        WHERE GH.gsm_key = #{from_gsm_key}
    </insert>

    <insert id="copyToNewGSMContolSettingCheckConditionDevice">
        INSERT INTO control_setting_chk_condition_device (control_setting_chk_condition_id, device_id, gsm_key)
        SELECT (${to_gsm_key}  * 1000000000) + (D.id %  1000000000) , (${to_gsm_key}  * 1000000000) + (CD.device_id %  1000000000)   ,#{to_gsm_key}
        FROM control_setting_chk_condition D
        INNER JOIN control_setting_chk_condition_device CD ON CD.control_setting_chk_condition_id = D.id
        INNER JOIN control_setting S ON  S.id = D.control_setting_id
        INNER JOIN green_house GH ON GH.id = S.green_house_id
        WHERE GH.gsm_key = #{from_gsm_key}
    </insert>

    <insert id="copyToNewGSMControlSettingDevice">
    INSERT INTO control_setting_device ( id, gsm_key, control_setting_id, logic_id, device_num, device_insert_order, device_id)
    SELECT (${to_gsm_key}  * 1000000000) + (D.id %  1000000000),
            #{to_gsm_key},
    (${to_gsm_key}  * 1000000000) + (D.control_setting_id %  1000000000), D.logic_id, D.device_num, D.device_insert_order, (${to_gsm_key}  * 1000000000) + (D.device_id %  1000000000)
    FROM control_setting_device D
    INNER JOIN control_setting S ON  S.id = D.control_setting_id
    INNER JOIN green_house GH ON GH.id = S.green_house_id
    WHERE GH.gsm_key = #{from_gsm_key}
    </insert>
    <insert id="copyToNewGSMControlPreOrder">
    INSERT INTO control_setting_pre_order (id, gsm_key, control_setting_id, pre_order_setting_id)
    SELECT (${to_gsm_key}  * 1000000000) + (D.id %  1000000000),
           #{to_gsm_key},
           (${to_gsm_key}  * 1000000000) + (D.control_setting_id %  1000000000),
           (${to_gsm_key}  * 1000000000) + (D.pre_order_setting_id %  1000000000)
    FROM control_setting_pre_order D
    INNER JOIN control_setting S ON  S.id = D.control_setting_id
    INNER JOIN green_house GH ON GH.id = S.green_house_id
    WHERE GH.gsm_key = #{from_gsm_key}
    </insert>


</mapper>

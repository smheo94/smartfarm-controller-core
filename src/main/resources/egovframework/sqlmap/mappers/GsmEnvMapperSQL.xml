<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kt.smartfarm.supervisor.mapper.GsmEnvMapper">


	<insert id="insert" parameterType="gsmEnvVO">
		REPLACE INTO gsm_info (
			gsm_key,
			area_code, 
			farm_nickname, 
			system_host, 
			system_port, 		
			farm_nickname_i18n,
			category_id
		)
		VALUES (
			#{gsmKey}, 
			#{areaCode}, 
			#{farmNickname},
			#{systemHost}, 
			#{systemPort},		
			#{farmNicknameI18n},
			#{categoryId}
		);
	</insert>
	
	<update id="update" parameterType="gsmEnvVO">	
		UPDATE gsm_info
		SET 
			<if test="gsmKey != null"> gsm_key= #{gsmKey}</if>
			<if test="userInfoId != null"> , user_info_id= #{userInfoId}</if>
			<if test="isMine != null"> , is_mine= #{isMine}</if>
			<if test="areaCode != null"> , area_code= #{areaCode}</if>
			<if test="farmNickname != null"> , farm_nickname= #{farmNickname}</if>
			<if test="updateDate != null"> , update_date= NOW()</if>
			<if test="ownerUserInfoId != null"> , owner_user_info_id= #{ownerUserInfoId}</if>
			<if test="masterSystemHost != null"> , master_system_host= #{masterSystemHost}</if>
			<if test="masterSystemPort != null"> , master_system_port= #{masterSystemPort}</if>
			<if test="systemHost != null"> , system_host= #{systemHost}</if>
			<if test="systemPort != null"> , system_port= #{systemPort}</if>
			<if test="vpnSystemHost != null"> , vpn_system_host= #{vpnSystemHost}</if>
			<if test="vpnSystemPort != null"> , vpn_system_port= #{vpnSystemPort}</if>
			<if test="cropsurl != null"> , cropsurl= #{cropsurl}</if>
			<if test="imsurl != null"> , imsurl= #{imsurl}</if>
			<if test="mqttBrokerHost != null"> , mqtt_broker_host= #{mqttbrokerHost}</if>
			<if test="mqttBrokerPort != null"> , mqtt_broker_port= #{mqttBrokerPort}</if>
			<if test="serverReadTime != null"> , server_read_time= #{serverReadTime}</if>
			<if test="productInterval != null"> , product_interval= #{productInterval}</if>
			<if test="monitoringInterval != null"> , monitoring_interval= #{monitoringInterval}</if>
			<if test="historySaveDbInterval != null"> , history_save_db_interval= #{historySaveDbInterval}</if>
			<if test="sensorCurrentRetentionPeriod != null"> , sensor_current_retention_period= #{sensorCurrentRetentionPeriod}</if>
			<if test="debugStopEvent != null"> , debug_stop_event= #{debugStopEvent}</if>
			<if test="debugStopCrops != null"> , debug_stop_crops= #{debugStopCrops}</if>
			<if test="debugStopDeviceAutoControl != null"> , debug_stop_device_auto_control= #{debugStopDeviceAutoContorl}</if>
			<if test="debugStopIms != null"> , debug_stop_ims= #{debugStopIms}</if>
			<if test="delayAutoControlStart != null"> , delay_auto_control_start = #{delayAutoControlStart}</if>
			<if test="packageVersion != null"> , package_version = #{packageVersion}</if>
			<if test="schemaVersion != null"> , schema_version = #{schemaVersion}</if>
			<if test="nutrientMonitoringInterval != null"> , nutrient_monitoring_interval= #{nutrientMonitoringInterval}</if>
			<if test="farmNicknameI18n != null"> , farm_nickname_i18n = #{farmNicknameI18n}</if>
			<if test="userId != null"> , user_id = #{userId}</if>
			<if test="farmDbId != null"> , farm_db_id = #{farmDbId}</if>
			<if test="categoryId != null"> , category_id = #{categoryId}</if>
			<if test="monitoringProcessInterval != null"> ,monitoring_process_interval = #{monitoringProcessInterval}</if>
		WHERE gsm_key = #{gsmKey}
	</update>
	
	<delete id="delete" >
		DELETE
		FROM gsm_info
		WHERE gsm_key = #{gsmKey};
	</delete>

	
	<select id="gsmOfDeviceList" resultType="map">
		/*gsmOfDeviceList*/
		SELECT
			gsm_info.gsm_key as gsmKey, gsm_info.user_info_id as userInfoId, is_mine as isMine, area_code as areaCode,
 			farm_nickname as farmNickname, gsm_info.update_date as updateDate, owner_user_info_id as ownerUserInfoId, master_system_host as masterSystemHost,
 			master_system_port as masterSystemPort, system_host as systemHost, system_port as systemPort, cropsurl, imsurl,
 			mqtt_broker_host as mqttbrokerHost, mqtt_broker_port as mqttBrokerPort, server_read_time as serverReadTime, product_interval as productInterval,
 			monitoring_interval as monitoringInterval, history_save_db_interval as historySaveDbInterval, sensor_current_retention_period as sensorCurrentRetentionPeriod,
 			debug_stop_event as debugStopEvent, debug_stop_crops as debugStopCrops, debug_stop_device_auto_control as debugStopDeviceAutoContorl, debug_stop_ims as debugStopIms,
 			delay_auto_control_start as delayAutoControlStart, package_version as packageVersion, schema_version as schemaVersion, nutrient_monitoring_interval as nutrientMonitoringInterval,
 			farm_nickname_i18n as farmNicknameI18n, user_id as userId, farm_db_id as farmDbId, category_id as categoryId, COUNT(device.id) AS deviceCount
		FROM gsm_info
		LEFT OUTER JOIN device ON gsm_info.gsm_key = device.gsm_key
		<where>
			<if test="gsmKey != null"> AND device.gsm_key = #{gsmKey}</if>
		</where>
		GROUP BY gsm_info.gsm_key;
	</select>
	
	<select id="get" resultType="gsmEnvVO" >
		/*get*/
		SELECT
			gsm_info.gsm_key as gsmKey, gsm_info.user_info_id as userInfoId, is_mine as isMine, area_code as areaCode,
 			farm_nickname as farmNickname, gsm_info.update_date as updateDate, owner_user_info_id as ownerUserInfoId, master_system_host as masterSystemHost,
 			master_system_port as masterSystemPort, system_host as systemHost, system_port as systemPort, cropsurl, imsurl,
 			mqtt_broker_host as mqttbrokerHost, mqtt_broker_port as mqttBrokerPort, server_read_time as serverReadTime, product_interval as productInterval,
 			monitoring_interval as monitoringInterval, history_save_db_interval as historySaveDbInterval, sensor_current_retention_period as sensorCurrentRetentionPeriod,
 			debug_stop_event as debugStopEvent, debug_stop_crops as debugStopCrops, debug_stop_device_auto_control as debugStopDeviceAutoContorl, debug_stop_ims as debugStopIms,
 			delay_auto_control_start as delayAutoControlStart, package_version as packageVersion, schema_version as schemaVersion, nutrient_monitoring_interval as nutrientMonitoringInterval,
 			farm_nickname_i18n as farmNicknameI18n, user_id as userId, farm_db_id as farmDbId, category_id as categoryId
		FROM gsm_info 
		WHERE 
			gsm_key = #{gsmKey}
	</select>

	<select id="getGsmList" resultType="map" >
		/*getGsmList*/
		SELECT
			gsm_info.gsm_key as gsmKey, gsm_info.user_info_id as userInfoId, is_mine as isMine, area_code as areaCode,
 			farm_nickname as farmNickname, gsm_info.update_date as updateDate, owner_user_info_id as ownerUserInfoId, master_system_host as masterSystemHost,
 			master_system_port as masterSystemPort, system_host as systemHost, system_port as systemPort, cropsurl, imsurl,
 			mqtt_broker_host as mqttbrokerHost, mqtt_broker_port as mqttBrokerPort, server_read_time as serverReadTime, product_interval as productInterval,
 			monitoring_interval as monitoringInterval, history_save_db_interval as historySaveDbInterval, sensor_current_retention_period as sensorCurrentRetentionPeriod,
 			debug_stop_event as debugStopEvent, debug_stop_crops as debugStopCrops, debug_stop_device_auto_control as debugStopDeviceAutoContorl, debug_stop_ims as debugStopIms,
 			delay_auto_control_start as delayAutoControlStart, package_version as packageVersion, schema_version as schemaVersion, nutrient_monitoring_interval as nutrientMonitoringInterval,
 			farm_nickname_i18n as farmNicknameI18n, user_id as userId, farm_db_id as farmDbId, category_id as categoryId
		FROM gsm_info
		<where>
			<if test="gsmKey != null"> AND gsm_info.gsm_key = #{gsmKey}</if>
			<if test="userInfoId != null"> AND gsm_info.user_info_id = #{userInfoId}</if>
		</where>
	</select>

	<select id="getHouseList" resultType="houseEnvVO">
		/*getHouseList*/
		SELECT 
			id, product_method_id, green_house_type_id, house_name,
			latitude, longitude, description, build_date, last_update, addr_1,
			addr_2, zip, nutrient_common_id, change_gh, change_temperature,
			floor_space, house_horizontal, house_vertical, house_height,
			plant_spacing, crop_cnt, house_direction, select_temp_sensor,
			select_hum_sensor, green_house.gsm_key, house_name_i18n
		FROM green_house
		INNER JOIN gsm_info ON green_house.gsm_key = gsm_info.gsm_key
		WHERE green_house.gsm_key = #{gsmKey}
	</select>
	
	<select id="notMappedList" resultType="gsmEnvVO">
		SELECT
			gsm_key, user_info_id, is_mine, area_code, farm_nickname, update_date, owner_user_info_id, master_system_host, 
			master_system_port, system_host, system_port, vpn_system_host, vpn_system_port, cropsurl, imsurl, mqtt_broker_host, 
			mqtt_broker_port, server_read_time, product_interval, monitoring_interval, history_save_db_interval, 
			sensor_current_retention_period, debug_stop_event, debug_stop_crops, debug_stop_device_auto_control, 
			debug_stop_ims, delay_auto_control_start, package_version, schema_version, nutrient_monitoring_interval, 
			farm_nickname_i18n, user_id, farm_db_id, category_id, monitoring_process_interval
		FROM
			gsm_info
		WHERE 
			user_info_id IS NULL
	</select>
	
	<update id="userRegistGSM" parameterType="map">
		UPDATE gsm_info
		SET 
			user_info_id = #{userInfoId}
		WHERE gsm_key = #{gsmKey}
	</update>
	
	<select id="getGsmInfoByUser" parameterType="Integer" resultType="gsmEnvVO">
		SELECT
			gsm_key, user_info_id, is_mine, area_code, farm_nickname, update_date, owner_user_info_id, master_system_host, 
			master_system_port, system_host, system_port, vpn_system_host, vpn_system_port, cropsurl, imsurl, mqtt_broker_host, 
			mqtt_broker_port, server_read_time, product_interval, monitoring_interval, history_save_db_interval, 
			sensor_current_retention_period, debug_stop_event, debug_stop_crops, debug_stop_device_auto_control, 
			debug_stop_ims, delay_auto_control_start, package_version, schema_version, nutrient_monitoring_interval, 
			farm_nickname_i18n, user_id, farm_db_id, category_id, monitoring_process_interval
		FROM
			gsm_info
		WHERE 
			user_info_id = #{userInfoId}
	</select>


	<select id ="gsmThresholdGet" parameterType="map" resultType="gsmThresholdVO">
		SELECT 
			gsm_key AS gsmKey ,
			update_date AS updateDate ,			
			storm_limit AS stormLimit,
			storm_sensing_delay AS stormSensingDelay,
			storm_terminate_delay AS stormTerminateDelay,
			wind_direction_waiting_time AS windDirectionWaitingTime,
			wind_direction_degree AS windDirectionDegree,
			rain_sensing_delay AS rainSensingDelay,
			rain_terminate_delay AS rainTerminateDelay,
			top_window_left_degree AS topWindowLeftDegree,
			top_window_right_degree AS topWindowRightDegree,
			sensor_select AS sensorSelect,
			use_wind_dectector AS useWindDetector,
			use_rain_dectector AS useRainDetector,
			ex_window_use_wind_dectector AS exWindowUseWindDetector,
			ex_window_use_rain_dectector AS exWindowUseRainDetector,
			side_window_use_wind_dectector AS sideWindowUseWindDetector,
			side_window_use_rain_dectector AS sideWindowUseRainDetector,
			base_forward_window AS baseForwardWindow,
			actuator_init_temp AS actuatorInitTemp,
			weather_mqtt_host AS weatherMqttHost,
			weather_mqtt_port AS weatherMqttPort
  		FROM gsm_config
  		WHERE gsm_key = #{gsmKey}
	</select>

	<insert id ="gsmThresholdInsert" parameterType="gsmThresholdVO">
		INSERT INTO gsm_config(
			gsm_key, update_date, storm_limit, storm_sensing_delay, storm_terminate_delay, wind_direction_waiting_time, wind_direction_degree, 
			rain_sensing_delay, rain_terminate_delay, top_window_left_degree, top_window_right_degree, sensor_select, use_wind_dectector, use_rain_dectector, 
			ex_window_use_wind_dectector, ex_window_use_rain_dectector, side_window_use_wind_dectector, side_window_use_rain_dectector, 
			base_forward_window, actuator_init_temp, weather_mqtt_host, weather_mqtt_port            
		)
		VALUES (
			#{gsmKey} ,NOW(),#{stormLimit},#{stormSensingDelay},#{stormTerminateDelay},#{windDirectionWaitingTime},#{windDirectionDegree},
			#{rainSensingDelay},#{rainTerminateDelay},#{topWindowLeftDegree},#{topWindowRightDegree},#{sensorSelect},#{useWindDetector},#{useRainDetector},
			#{exWindowUseWindDetector},#{exWindowUseRainDetector},#{sideWindowUseWindDetector},#{sideWindowUseRainDetector},
			#{baseForwardWindow},#{actuatorInitTemp},#{weatherMqttHost},#{weatherMqttPort}
		) 
	</insert>
	
	<update id ="gsmThresholdUpdate" parameterType="gsmThresholdVO">
		UPDATE gsm_config
		SET 			 
			 <if test="stormLimit != null">storm_limit = #{stormLimit},</if>
			 <if test="stormSensingDelay != null">storm_sensing_delay= #{stormSensingDelay},</if>
			 <if test="stormTerminateDelay != null">storm_terminate_delay= #{stormTerminateDelay},</if>
			 <if test="windDirectionWaitingTime != null">wind_direction_waiting_time= #{windDirectionWaitingTime},</if>
			 <if test="windDirectionDegree != null">wind_direction_degree= #{windDirectionDegree},</if>
			 <if test="rainSensingDelay != null">rain_sensing_delay= #{rainSensingDelay},</if>
			 <if test="rainTerminateDelay != null">rain_terminate_delay= #{rainTerminateDelay},</if>
			 <if test="topWindowLeftDegree != null"> top_window_left_degree= #{topWindowLeftDegree},</if>
			 <if test="topWindowRightDegree != null">top_window_right_degree= #{topWindowRightDegree},</if>
			 <if test="sensorSelect != null">sensor_select= #{sensorSelect},</if>
			 <if test="useWindDetector != null">use_wind_dectector= #{useWindDetector},</if>
			 <if test="useRainDetector != null">use_rain_dectector= #{useRainDetector},</if>
			 <if test="exWindowUseWindDetector != null">ex_window_use_wind_dectector= #{exWindowUseWindDetector},</if>
			 <if test="exWindowUseRainDetector != null">ex_window_use_rain_dectector= #{exWindowUseRainDetector},</if>
			 <if test="sideWindowUseWindDetector != null">side_window_use_wind_dectector= #{sideWindowUseWindDetector},</if>
			 <if test="sideWindowUseRainDetector != null">side_window_use_rain_dectector= #{sideWindowUseRainDetector},</if>
			 <if test="baseForwardWindow != null">baseForwardWindow= #{baseForwardWindow},</if>
			 <if test="actuatorInitTemp != null">actuatorInitTemp= #{actuatorInitTemp},</if>
			 <if test="weatherMqttHost != null">base_forward_window= #{weatherMqttHost},</if>
			 <if test="weatherMqttPort != null">actuator_init_temp= #{weatherMqttPort},</if>			 
		 	 update_date = NOW()
		WHERE gsm_key=#{gsmKey} 
	</update>		
</mapper>

